# Autogenerated file from the user-defined pipeline.

import argparse
import logging
import requests
from typing import Any, Dict

import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions


parser = argparse.ArgumentParser()
parser.add_argument(
    "function_urls",
    type=lambda pair: tuple(pair.split("=", 2)),
    nargs="*",
)
args, beam_args = parser.parse_known_args()

function_urls = dict(args.function_urls)


class Call(beam.DoFn):
    def __init__(self, function: str, args: Dict[str, Any] = {}):
        if function not in function_urls:
            raise KeyError(f"undefined function: {repr(function)}")
        self.function = function
        self.url = function_urls[function]
        self.args = args
        print(f"Registered call: {self.function} url={self.url} args={self.args}")

    def process(self, element):
        response = requests.post(self.url, json={"x": element, "args": self.args})
        result = response.json()
        if "error" in result:
            raise RuntimeError(
                "I got the following error during the call: "
                f"{self.function} (element={element}, args={self.args})\n"
                f"{result['error']}"
            )
        yield result["ok"]


if __name__ == "__main__":
    beam_options = PipelineOptions(beam_args, save_main_session=True)
    with beam.Pipeline(options=beam_options) as pipeline:
        (
            pipeline
            | "Create" >> beam.Create([1, 2, 3, 4])
            | "Call Python" >> beam.ParDo(Call("hello", {"x": 42}))
            | "Print" >> beam.Map(print)
        )
